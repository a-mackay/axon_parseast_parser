use chrono::{NaiveDate, NaiveTime};
use crate::{Lit, Month, Val, YearMonth};
use raystack_core::{Number, Ref, TagName};
use std::collections::HashMap;
use std::str::FromStr;

grammar;

pub Val: Val = {
    Bool => Val::Lit(Lit::Bool(<>)),
    Date => Val::Lit(Lit::Date(<>)),
    Null => Val::Lit(Lit::Null),
    Num => Val::Lit(Lit::Num(<>)),
    Ref => Val::Lit(Lit::Ref(<>)),
    Str => Val::Lit(Lit::Str(<>)),
    Time => Val::Lit(Lit::Time(<>)),
    Uri => Val::Lit(Lit::Uri(<>)),
    YearMonth => Val::Lit(Lit::YearMonth(<>)),
    "[" "]" => Val::List(vec![]),
    "[" <first_val:Val> <vals:("," <Val>)*> "]" => {
        let mut vals = vals;
        vals.insert(0, first_val);
        Val::List(vals)
    },
    "{" "}" => Val::Dict(HashMap::new()),
    "{" <first_entry:DictEntry> <entries:("," <DictEntry>)*> "}" => {
        let mut entries = entries;
        entries.insert(0, first_entry);
        Val::Dict(entries.into_iter().collect())
    }
}

pub YearMonth: YearMonth = {
    r"[1-9][0-9]{3}-[0-9]{2}" => {
        let parts = <>.split("-").collect::<Vec<_>>();
        let year = u32::from_str(parts[0]).unwrap();
        let month = u32::from_str(parts[1]).unwrap();
        let month = Month::from_int(month).unwrap();
        YearMonth::new(year, month)
    }
}

pub Time: NaiveTime = {
    r"[0-9]{2}:[0-9]{2}(:[0-9]{2})?" => {
        let with_secs = NaiveTime::parse_from_str(<>, "%H:%M:%S");
        match &with_secs {
            Ok(_) => with_secs.unwrap(),
            Err(_) => NaiveTime::parse_from_str(<>, "%H:%M").unwrap(),
        }
    }
}

pub Date: NaiveDate = {
    r"[1-9][0-9]{3}-[0-9]{2}-[0-9]{2}" => {
        NaiveDate::parse_from_str(<>, "%Y-%m-%d").unwrap()
    }
}

Ref: Ref = {
    r"@[a-zA-Z0-9_:\.~-]+" => Ref::new(<>.to_owned()).unwrap(),
}

Null: () = {
    "null" => (),
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

DictEntry: (TagName, Box<Val>) = {
    <tag_name:TagName> ":" "removeMarker()" => (tag_name, Box::new(Val::Lit(Lit::DictRemoveMarker))),
    <tag_name:TagName> ":" <val:Val> => (tag_name, Box::new(val)),
    <tag_name:TagName> => (tag_name, Box::new(Val::Lit(Lit::DictMarker))),
}

pub Str: String = {
    r#""([^\\"]|\\[nt"\\])*""# => {
        let s = <>;
        let len = s.len();
        s[1..len - 1]
            .replace(r#"\""#, r#"""#)
            .replace(r"\n", "\n")
            .replace(r"\t", "\t")
            .replace(r"\\", r#"\"#)
            .to_owned()
    },
}

pub Num: Number = {
    <float:Float> <unit:(Unit)?>=> {
        Number::new(float, unit)
    },
}

pub Uri: String = {
    <r"`[^`]*`"> => {
        let s = <>;
        let len = s.len();
        s[1..len - 1].to_owned()
    },
}

pub Float: f64 = {
    <number:r"-?[0-9]+(\.[0-9]+)?"> => f64::from_str(number).unwrap(),
}

pub TagName: TagName = {
    r"[a-z]([a-zA-Z0-9_])*" => TagName::new(<>.to_owned()).unwrap(),
}

pub Unit: String = {
    "percent" => <>.to_owned(),
    "%" => <>.to_owned(),
    "pixel" => <>.to_owned(),
    "px" => <>.to_owned(),
    "decibel" => <>.to_owned(),
    "db" => <>.to_owned(),
    "power_factor" => <>.to_owned(),
    "pf" => <>.to_owned(),
    "ph" => <>.to_owned(),
    "pH" => <>.to_owned(),
    "percent_relative_humidity" => <>.to_owned(),
    "%RH" => <>.to_owned(),
    "grams_of_water_per_kilogram_dry_air" => <>.to_owned(),
    "volts_per_degree_kelvin" => <>.to_owned(),
    "V/K" => <>.to_owned(),
    "degree_days_celsius" => <>.to_owned(),
    "degree_days_fahrenheit" => <>.to_owned(),
    "percent_obscuration_per_foot" => <>.to_owned(),
    "%obsc/ft" => <>.to_owned(),
    "percent_obscuration_per_meter" => <>.to_owned(),
    "%obsc/m" => <>.to_owned(),
    "psi_per_degree_fahrenheit" => <>.to_owned(),
    "square_meters_per_newton" => <>.to_owned(),
    "watts_per_square_meter_degree_kelvin" => <>.to_owned(),
    "db_millivolt" => <>.to_owned(),
    "dBmV" => <>.to_owned(),
    "db_microvolt" => <>.to_owned(),
    "parts_per_unit" => <>.to_owned(),
    "ppu" => <>.to_owned(),
    "parts_per_million" => <>.to_owned(),
    "ppm" => <>.to_owned(),
    "parts_per_billion" => <>.to_owned(),
    "ppb" => <>.to_owned(),
    "grams_per_kilogram" => <>.to_owned(),
    "g/kg" => <>.to_owned(),
    "radian" => <>.to_owned(),
    "rad" => <>.to_owned(),
    "degrees_angular" => <>.to_owned(),
    "deg" => <>.to_owned(),
    "degrees_phase" => <>.to_owned(),
    "degPh" => <>.to_owned(),
    "steradian" => <>.to_owned(),
    "sr" => <>.to_owned(),
    "nephelometric_turbidity_units" => <>.to_owned(),
    "ntu" => <>.to_owned(),
    "formazin_nephelometric_unit" => <>.to_owned(),
    "fnu" => <>.to_owned(),
    "power_usage_effectiveness" => <>.to_owned(),
    "PUE" => <>.to_owned(),
    "data_center_infrastructure_efficiency" => <>.to_owned(),
    "DCIE" => <>.to_owned(),
    "meters_per_second_squared" => <>.to_owned(),
    "radians_per_second_squared" => <>.to_owned(),
    "joule_second" => <>.to_owned(),
    "Js" => <>.to_owned(),
    "radians_per_second" => <>.to_owned(),
    "rad/s" => <>.to_owned(),
    "revolutions_per_minute" => <>.to_owned(),
    "rpm" => <>.to_owned(),
    "square_meter" => <>.to_owned(),
    "square_millimeter" => <>.to_owned(),
    "square_centimeter" => <>.to_owned(),
    "square_kilometer" => <>.to_owned(),
    "square_inch" => <>.to_owned(),
    "square_foot" => <>.to_owned(),
    "square_yard" => <>.to_owned(),
    "square_mile" => <>.to_owned(),
    "acre" => <>.to_owned(),
    "farad" => <>.to_owned(),
    "F" => <>.to_owned(),
    "coefficient_of_performance" => <>.to_owned(),
    "COP" => <>.to_owned(),
    "energy_efficiency_ratio" => <>.to_owned(),
    "Btu/Wh" => <>.to_owned(),
    "EER" => <>.to_owned(),
    "kilowatt_per_ton" => <>.to_owned(),
    "kW/ton" => <>.to_owned(),
    "kilograms_per_cubic_meter" => <>.to_owned(),
    "micrograms_per_cubic_meter" => <>.to_owned(),
    "coulomb" => <>.to_owned(),
    "C" => <>.to_owned(),
    "ampere_hour" => <>.to_owned(),
    "Ah" => <>.to_owned(),
    "siemens" => <>.to_owned(),
    "S" => <>.to_owned(),
    "ampere" => <>.to_owned(),
    "A" => <>.to_owned(),
    "milliampere" => <>.to_owned(),
    "mA" => <>.to_owned(),
    "ampere_square_meter" => <>.to_owned(),
    "amperes_per_square_meter" => <>.to_owned(),
    "volts_per_meter" => <>.to_owned(),
    "V/m" => <>.to_owned(),
    "volt" => <>.to_owned(),
    "Volt" => <>.to_owned(),
    "V" => <>.to_owned(),
    "millivolt" => <>.to_owned(),
    "mV" => <>.to_owned(),
    "kilovolt" => <>.to_owned(),
    "kV" => <>.to_owned(),
    "megavolt" => <>.to_owned(),
    "MV" => <>.to_owned(),
    "ohm" => <>.to_owned(),
    "kilohm" => <>.to_owned(),
    "megohm" => <>.to_owned(),
    "milliohm" => <>.to_owned(),
    "siemens_per_meter" => <>.to_owned(),
    "S/m" => <>.to_owned(),
    "ohm_meter" => <>.to_owned(),
    "joule" => <>.to_owned(),
    "J" => <>.to_owned(),
    "kilojoule" => <>.to_owned(),
    "kJ" => <>.to_owned(),
    "watt_hour" => <>.to_owned(),
    "Wh" => <>.to_owned(),
    "kilowatt_hour" => <>.to_owned(),
    "kWh" => <>.to_owned(),
    "megawatt_hour" => <>.to_owned(),
    "MWh" => <>.to_owned(),
    "btu" => <>.to_owned(),
    "BTU" => <>.to_owned(),
    "kilobtu" => <>.to_owned(),
    "kBTU" => <>.to_owned(),
    "megabtu" => <>.to_owned(),
    "MBTU" => <>.to_owned(),
    "MMBTU" => <>.to_owned(),
    "horsepower_hour" => <>.to_owned(),
    "hph" => <>.to_owned(),
    "calorie" => <>.to_owned(),
    "cal" => <>.to_owned(),
    "therm" => <>.to_owned(),
    "tons_refrigeration_hour" => <>.to_owned(),
    "tonrefh" => <>.to_owned(),
    "megajoule" => <>.to_owned(),
    "MJ" => <>.to_owned(),
    "gigajoule" => <>.to_owned(),
    "GJ" => <>.to_owned(),
    "newton_meter" => <>.to_owned(),
    "Nm" => <>.to_owned(),
    "cubic_meters_natural_gas" => <>.to_owned(),
    "cubic_feet_natural_gas" => <>.to_owned(),
    "hundred_cubic_feet_natural_gas" => <>.to_owned(),
    "thousand_cubic_feet_natural_gas" => <>.to_owned(),
    "million_cubic_feet_natural_gas" => <>.to_owned(),
    "volt_ampere_hour" => <>.to_owned(),
    "VAh" => <>.to_owned(),
    "kilovolt_ampere_hour" => <>.to_owned(),
    "kVAh" => <>.to_owned(),
    "megavolt_ampere_hour" => <>.to_owned(),
    "MVAh" => <>.to_owned(),
    "volt_ampere_reactive_hour" => <>.to_owned(),
    "VARh" => <>.to_owned(),
    "kilovolt_ampere_reactive_hour" => <>.to_owned(),
    "kVARh" => <>.to_owned(),
    "megavolt_ampere_reactive_hour" => <>.to_owned(),
    "MVARh" => <>.to_owned(),
    "joules_per_square_meter" => <>.to_owned(),
    "watt_hours_per_square_meter" => <>.to_owned(),
    "watt_hours_per_square_foot" => <>.to_owned(),
    "kilowatt_hours_per_square_meter" => <>.to_owned(),
    "kilowatt_hours_per_square_foot" => <>.to_owned(),
    "megawatt_hours_per_square_meter" => <>.to_owned(),
    "megawatt_hours_per_square_foot" => <>.to_owned(),
    "megajoules_per_square_meter" => <>.to_owned(),
    "megajoules_per_square_foot" => <>.to_owned(),
    "kilobtu_per_square_foot" => <>.to_owned(),
    "megabtu_per_square_foot" => <>.to_owned(),
    "joules_per_gram" => <>.to_owned(),
    "J/g" => <>.to_owned(),
    "joules_per_kilogram" => <>.to_owned(),
    "J/kg" => <>.to_owned(),
    "joules_per_kilogram_dry_air" => <>.to_owned(),
    "J/kg_dry" => <>.to_owned(),
    "btu_per_pound" => <>.to_owned(),
    "BTU/lb" => <>.to_owned(),
    "btus_per_pound_dry_air" => <>.to_owned(),
    "btu/lb_dry" => <>.to_owned(),
    "kilojoules_per_kilogram" => <>.to_owned(),
    "kJ/kg" => <>.to_owned(),
    "kilojoules_per_kilogram_dry_air" => <>.to_owned(),
    "kJ/kg_dry" => <>.to_owned(),
    "megajoules_per_kilogram_dry_air" => <>.to_owned(),
    "MJ/kg_dry" => <>.to_owned(),
    "calorie_per_gram" => <>.to_owned(),
    "cal/g" => <>.to_owned(),
    "joules_per_degree_kelvin" => <>.to_owned(),
    "kilojoules_per_degree_kelvin" => <>.to_owned(),
    "megajoules_per_degree_kelvin" => <>.to_owned(),
    "newton" => <>.to_owned(),
    "N" => <>.to_owned(),
    "pound_force" => <>.to_owned(),
    "lbf" => <>.to_owned(),
    "hertz" => <>.to_owned(),
    "Hz" => <>.to_owned(),
    "kilohertz" => <>.to_owned(),
    "kHz" => <>.to_owned(),
    "cycles_per_hour" => <>.to_owned(),
    "cph" => <>.to_owned(),
    "cycles_per_minute" => <>.to_owned(),
    "cpm" => <>.to_owned(),
    "megahertz" => <>.to_owned(),
    "MHz" => <>.to_owned(),
    "per_minute" => <>.to_owned(),
    "/min" => <>.to_owned(),
    "per_second" => <>.to_owned(),
    "/s" => <>.to_owned(),
    "per_hour" => <>.to_owned(),
    "/h" => <>.to_owned(),
    "percent_per_second" => <>.to_owned(),
    "%/s" => <>.to_owned(),
    "air_changes_per_hour" => <>.to_owned(),
    "ACH" => <>.to_owned(),
    "kilograms_per_square_meter" => <>.to_owned(),
    "grams_per_square_meter" => <>.to_owned(),
    "degrees_kelvin_per_second" => <>.to_owned(),
    "K/s" => <>.to_owned(),
    "degrees_celsius_per_hour" => <>.to_owned(),
    "degrees_celsius_per_minute" => <>.to_owned(),
    "degrees_fahrenheit_per_hour" => <>.to_owned(),
    "degrees_fahrenheit_per_minute" => <>.to_owned(),
    "degrees_kelvin_per_hour" => <>.to_owned(),
    "K/h" => <>.to_owned(),
    "degrees_kelvin_per_minute" => <>.to_owned(),
    "K/min" => <>.to_owned(),
    "lux" => <>.to_owned(),
    "lx" => <>.to_owned(),
    "footcandle" => <>.to_owned(),
    "fc" => <>.to_owned(),
    "phot" => <>.to_owned(),
    "henry" => <>.to_owned(),
    "H" => <>.to_owned(),
    "watts_per_square_meter_irradiance" => <>.to_owned(),
    "watts_per_square_foot_irradiance" => <>.to_owned(),
    "meter" => <>.to_owned(),
    "m" => <>.to_owned(),
    "micrometer" => <>.to_owned(),
    "millimeter" => <>.to_owned(),
    "mm" => <>.to_owned(),
    "centimeter" => <>.to_owned(),
    "cm" => <>.to_owned(),
    "kilometer" => <>.to_owned(),
    "km" => <>.to_owned(),
    "inch" => <>.to_owned(),
    "in" => <>.to_owned(),
    "foot" => <>.to_owned(),
    "ft" => <>.to_owned(),
    "yard" => <>.to_owned(),
    "yd" => <>.to_owned(),
    "mile" => <>.to_owned(),
    "candelas_per_square_meter" => <>.to_owned(),
    "candels_per_square_foot" => <>.to_owned(),
    "lumen" => <>.to_owned(),
    "lm" => <>.to_owned(),
    "candela" => <>.to_owned(),
    "cd" => <>.to_owned(),
    "amperes_per_meter" => <>.to_owned(),
    "A/m" => <>.to_owned(),
    "weber" => <>.to_owned(),
    "Wb" => <>.to_owned(),
    "tesla" => <>.to_owned(),
    "T" => <>.to_owned(),
    "kilogram" => <>.to_owned(),
    "kg" => <>.to_owned(),
    "milligram" => <>.to_owned(),
    "mg" => <>.to_owned(),
    "gram" => <>.to_owned(),
    "g" => <>.to_owned(),
    "ounce" => <>.to_owned(),
    "oz" => <>.to_owned(),
    "pound" => <>.to_owned(),
    "lb" => <>.to_owned(),
    "kilopound" => <>.to_owned(),
    "klb" => <>.to_owned(),
    "metric_ton" => <>.to_owned(),
    "ton" => <>.to_owned(),
    "short_ton" => <>.to_owned(),
    "t" => <>.to_owned(),
    "kilograms_per_second" => <>.to_owned(),
    "kg/s" => <>.to_owned(),
    "kilograms_per_minute" => <>.to_owned(),
    "kg/min" => <>.to_owned(),
    "kilograms_per_hour" => <>.to_owned(),
    "kg/h" => <>.to_owned(),
    "pounds_per_minute" => <>.to_owned(),
    "lb/min" => <>.to_owned(),
    "pounds_per_hour" => <>.to_owned(),
    "lb/h" => <>.to_owned(),
    "pounds_per_second" => <>.to_owned(),
    "lb/s" => <>.to_owned(),
    "kilopounds_per_hour" => <>.to_owned(),
    "klb/h" => <>.to_owned(),
    "grams_per_second" => <>.to_owned(),
    "g/s" => <>.to_owned(),
    "grams_per_minute" => <>.to_owned(),
    "g/min" => <>.to_owned(),
    "metric_tons_per_hour" => <>.to_owned(),
    "ton/h" => <>.to_owned(),
    "newton_second" => <>.to_owned(),
    "Ns" => <>.to_owned(),
    "watt" => <>.to_owned(),
    "W" => <>.to_owned(),
    "milliwatt" => <>.to_owned(),
    "mW" => <>.to_owned(),
    "kilowatt" => <>.to_owned(),
    "kW" => <>.to_owned(),
    "megawatt" => <>.to_owned(),
    "MW" => <>.to_owned(),
    "gigawatt" => <>.to_owned(),
    "GW" => <>.to_owned(),
    "btus_per_hour" => <>.to_owned(),
    "BTU/h" => <>.to_owned(),
    "therms_per_hour" => <>.to_owned(),
    "therm/h" => <>.to_owned(),
    "horsepower" => <>.to_owned(),
    "hp" => <>.to_owned(),
    "foot_pounds_per_second" => <>.to_owned(),
    "ftlbs/sec" => <>.to_owned(),
    "tons_refrigeration" => <>.to_owned(),
    "tonref" => <>.to_owned(),
    "kilobtus_per_hour" => <>.to_owned(),
    "kBTU/h" => <>.to_owned(),
    "megabtus_per_hour" => <>.to_owned(),
    "MBTU/h" => <>.to_owned(),
    "MMBTU/h" => <>.to_owned(),
    "joules_per_hour" => <>.to_owned(),
    "J/h" => <>.to_owned(),
    "kilojoules_per_hour" => <>.to_owned(),
    "kJ/h" => <>.to_owned(),
    "megajoules_per_hour" => <>.to_owned(),
    "MJ/h" => <>.to_owned(),
    "gigajoules_per_hour" => <>.to_owned(),
    "GJ/h" => <>.to_owned(),
    "watts_per_square_meter" => <>.to_owned(),
    "watts_per_square_foot" => <>.to_owned(),
    "kilowatts_per_square_meter" => <>.to_owned(),
    "kilowatts_per_square_foot" => <>.to_owned(),
    "kilobtus_per_hour_per_square_foot" => <>.to_owned(),
    "watts_per_cubic_meters_per_second" => <>.to_owned(),
    "watts_per_cubic_feet_per_minute" => <>.to_owned(),
    "W/cfm" => <>.to_owned(),
    "kilowatts_per_kilocubic_feet_per_minute" => <>.to_owned(),
    "kW/kcfm" => <>.to_owned(),
    "kilowatts_per_gallons_per_minute" => <>.to_owned(),
    "kW/gal/min" => <>.to_owned(),
    "volt_ampere" => <>.to_owned(),
    "VA" => <>.to_owned(),
    "kilovolt_ampere" => <>.to_owned(),
    "kVA" => <>.to_owned(),
    "megavolt_ampere" => <>.to_owned(),
    "mVA" => <>.to_owned(),
    "volt_ampere_reactive" => <>.to_owned(),
    "VAR" => <>.to_owned(),
    "kilovolt_ampere_reactive" => <>.to_owned(),
    "kVAR" => <>.to_owned(),
    "megavolt_ampere_reactive" => <>.to_owned(),
    "MVAR" => <>.to_owned(),
    "pascal" => <>.to_owned(),
    "Pa" => <>.to_owned(),
    "kilopascal" => <>.to_owned(),
    "kPa" => <>.to_owned(),
    "bar" => <>.to_owned(),
    "atmosphere" => <>.to_owned(),
    "atm" => <>.to_owned(),
    "pounds_per_square_inch" => <>.to_owned(),
    "psi" => <>.to_owned(),
    "centimeters_of_water" => <>.to_owned(),
    "inches_of_water" => <>.to_owned(),
    "in/wc" => <>.to_owned(),
    "millimeters_of_mercury" => <>.to_owned(),
    "mmHg" => <>.to_owned(),
    "centimeters_of_mercury" => <>.to_owned(),
    "cmHg" => <>.to_owned(),
    "inches_of_mercury" => <>.to_owned(),
    "inHg" => <>.to_owned(),
    "hectopascal" => <>.to_owned(),
    "hPa" => <>.to_owned(),
    "millibar" => <>.to_owned(),
    "mbar" => <>.to_owned(),
    "joules_per_kilogram_degree_kelvin" => <>.to_owned(),
    "newtons_per_meter" => <>.to_owned(),
    "N/m" => <>.to_owned(),
    "fahrenheit" => <>.to_owned(),
    "celsius" => <>.to_owned(),
    "kelvin" => <>.to_owned(),
    "K" => <>.to_owned(),
    "fahrenheit_degrees" => <>.to_owned(),
    "celsius_degrees" => <>.to_owned(),
    "kelvin_degrees" => <>.to_owned(),
    "watts_per_meter_degree_kelvin" => <>.to_owned(),
    "nanosecond" => <>.to_owned(),
    "ns" => <>.to_owned(),
    "microsecond" => <>.to_owned(),
    "millisecond" => <>.to_owned(),
    "ms" => <>.to_owned(),
    "hundredths_second" => <>.to_owned(),
    "cs" => <>.to_owned(),
    "tenths_second" => <>.to_owned(),
    "ds" => <>.to_owned(),
    "second" => <>.to_owned(),
    "sec" => <>.to_owned(),
    "s" => <>.to_owned(),
    "minute" => <>.to_owned(),
    "min" => <>.to_owned(),
    "hour" => <>.to_owned(),
    "hr" => <>.to_owned(),
    "h" => <>.to_owned(),
    "day" => <>.to_owned(),
    "week" => <>.to_owned(),
    "wk" => <>.to_owned(),
    "julian_month" => <>.to_owned(),
    "mo" => <>.to_owned(),
    "year" => <>.to_owned(),
    "yr" => <>.to_owned(),
    "meters_per_second" => <>.to_owned(),
    "m/s" => <>.to_owned(),
    "kilometers_per_second" => <>.to_owned(),
    "km/s" => <>.to_owned(),
    "kilometers_per_hour" => <>.to_owned(),
    "km/h" => <>.to_owned(),
    "miles_per_hour" => <>.to_owned(),
    "mph" => <>.to_owned(),
    "feet_per_second" => <>.to_owned(),
    "ft/s" => <>.to_owned(),
    "feet_per_minute" => <>.to_owned(),
    "ft/min" => <>.to_owned(),
    "millimeters_per_second" => <>.to_owned(),
    "mm/s" => <>.to_owned(),
    "millimeters_per_minute" => <>.to_owned(),
    "mm/min" => <>.to_owned(),
    "meters_per_minute" => <>.to_owned(),
    "m/min" => <>.to_owned(),
    "meters_per_hour" => <>.to_owned(),
    "m/h" => <>.to_owned(),
    "knot" => <>.to_owned(),
    "cubic_meter" => <>.to_owned(),
    "cubic_millimeter" => <>.to_owned(),
    "cubic_centimeter" => <>.to_owned(),
    "milliliter" => <>.to_owned(),
    "mL" => <>.to_owned(),
    "hectoliter" => <>.to_owned(),
    "hL" => <>.to_owned(),
    "liter" => <>.to_owned(),
    "L" => <>.to_owned(),
    "kiloliter" => <>.to_owned(),
    "kL" => <>.to_owned(),
    "cubic_inch" => <>.to_owned(),
    "cubic_foot" => <>.to_owned(),
    "cubic_yard" => <>.to_owned(),
    "gallon" => <>.to_owned(),
    "gal" => <>.to_owned(),
    "kilogallon" => <>.to_owned(),
    "kgal" => <>.to_owned(),
    "quart" => <>.to_owned(),
    "qt" => <>.to_owned(),
    "pint" => <>.to_owned(),
    "pt" => <>.to_owned(),
    "fluid_ounce" => <>.to_owned(),
    "fl_oz" => <>.to_owned(),
    "imperial_gallon" => <>.to_owned(),
    "galUK" => <>.to_owned(),
    "hecto_cubic_foot" => <>.to_owned(),
    "cubic_meters_per_second" => <>.to_owned(),
    "milliliters_per_second" => <>.to_owned(),
    "mL/s" => <>.to_owned(),
    "hectoliters_per_second" => <>.to_owned(),
    "hL/s" => <>.to_owned(),
    "liters_per_second" => <>.to_owned(),
    "L/s" => <>.to_owned(),
    "cubic_feet_per_second" => <>.to_owned(),
    "cfs" => <>.to_owned(),
    "cubic_feet_per_minute" => <>.to_owned(),
    "cfm" => <>.to_owned(),
    "cubic_feet_per_hour" => <>.to_owned(),
    "cfh" => <>.to_owned(),
    "kilocubic_feet_per_minute" => <>.to_owned(),
    "kcfm" => <>.to_owned(),
    "imperial_gallons_per_minute" => <>.to_owned(),
    "galUK/min" => <>.to_owned(),
    "liters_per_minute" => <>.to_owned(),
    "L/min" => <>.to_owned(),
    "gallons_per_minute" => <>.to_owned(),
    "gal/min" => <>.to_owned(),
    "gallons_per_hour" => <>.to_owned(),
    "gal/hr" => <>.to_owned(),
    "gph" => <>.to_owned(),
    "liters_per_hour" => <>.to_owned(),
    "L/h" => <>.to_owned(),
    "cubic_meters_per_minute" => <>.to_owned(),
    "cubic_meters_per_hour" => <>.to_owned(),
    "byte" => <>.to_owned(),
    "kilobyte" => <>.to_owned(),
    "kB" => <>.to_owned(),
    "megabyte" => <>.to_owned(),
    "MB" => <>.to_owned(),
    "gigabyte" => <>.to_owned(),
    "GB" => <>.to_owned(),
    "terabyte" => <>.to_owned(),
    "TB" => <>.to_owned(),
    "petabyte" => <>.to_owned(),
    "PB" => <>.to_owned(),
}